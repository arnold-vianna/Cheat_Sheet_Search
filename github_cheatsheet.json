{
    "git init": "Initialize a new Git repository in the current directory",
    "git clone <repository>": "Clone a remote repository to your local machine",
    "git add <file>": "Stage changes for the next commit",
    "git add .": "Stage all changes for the next commit",
    "git commit -m '<message>'": "Commit staged changes with a descriptive message",
    "git status": "View the status of your working directory",
    "git log": "Display the commit history",
    "git branch": "List all branches in the repository",
    "git branch <branch_name>": "Create a new branch",
    "git checkout <branch_name>": "Switch to a different branch",
    "git merge <branch_name>": "Merge changes from another branch into the current branch",
    "git pull": "Fetch changes from the remote repository and merge them into the current branch",
    "git push": "Push committed changes to the remote repository",
    "git remote -v": "View the remote repositories associated with your local repository",
    "git fetch": "Fetch changes from the remote repository without merging",
    "git diff": "Show the differences between the working directory and the last commit",
    "git rm <file>": "Remove a file from both the working directory and the Git repository",
    "git mv <old_file> <new_file>": "Rename or move a file and stage the changes",
    "git reset <file>": "Unstage changes for the specified file",
    "git reset --hard": "Discard all changes in the working directory and staging area",
    "git log --oneline": "Display the commit history in one line per commit",
    "git remote add <remote_name> <repository_url>": "Add a new remote repository",
    "git branch -d <branch_name>": "Delete a local branch",
    "git push <remote_name> --delete <branch_name>": "Delete a remote branch",
    "git tag <tag_name>": "Create a lightweight tag for the current commit",
    "git tag -a <tag_name> -m '<tag_message>'": "Create an annotated tag for the current commit",
    "git push --tags": "Push tags to the remote repository",
    "git config --global user.name 'Your Name'": "Set your global Git username",
    "git config --global user.email 'your.email@example.com'": "Set your global Git email",
    "git stash": "Stash changes in the working directory for later use",
    "git stash apply": "Apply the most recently stashed changes",
    "git stash list": "List all stashes",
    "git clean -fd": "Remove untracked files and directories from the working directory",
    "git remote show <remote_name>": "Show information about a remote repository",
    "git submodule update --init --recursive": "Initialize and update submodules",
    "git log --graph --oneline --all": "Display a compact and graph-like commit history",
    "git grep '<pattern>'": "Search for a pattern in the working directory",
    "git bisect start": "Start a binary search for the commit that introduced a bug",
    "git bisect good <commit_hash>": "Mark a commit as good during the binary search",
    "git bisect bad <commit_hash>": "Mark a commit as bad during the binary search",
    "git bisect reset": "Finish the binary search and return to the original branch",
    "git archive --format=zip --output=<output_filename> <branch_name>": "Create a zip archive of a specific branch",
    "git remote rename <old_remote_name> <new_remote_name>": "Rename a remote repository",
    "git reflog": "View a log of reference changes (useful for recovering lost commits)",
    "git cherry-pick <commit_hash>": "Apply the changes introduced by a specific commit to the current branch",
    "git remote prune <remote_name>": "Remove remote branches that no longer exist on the remote repository",
    "git log --pretty=format:'%h - %an, %ar : %s'": "Customize the format of the commit history display",
    "git grep --cached '<pattern>'": "Search for a pattern in the staging area",
    "git log --since='1 week ago'": "Show commits since a specific date or time",
    "git blame <file>": "Show who last modified each line in a file",
    "git rev-parse --abbrev-ref HEAD": "Get the current branch name",
    "git log --no-merges": "Display the commit history excluding merge commits",
    "git config --global alias.<alias_name> '<command>'": "Create a global Git alias",
    "git remote update": "Fetch changes from all remote repositories",
    "git log --grep='<pattern>'": "Search for commits with a specific message pattern",
    "git log -p -S '<string>'": "Search for commits that introduced or removed a specific string",
    "git blame -L <start>,<end> <file>": "Show who last modified the specified lines in a file",
    "git log --reverse": "Display the commit history in reverse order",
    "git diff <branch1>..<branch2>": "Show the differences between two branches",
    "git log --cherry-pick --right-only --no-merges <branch1>...<branch2>": "Show commits unique to the right branch in a three-dot range",
    "git log --graph --all --decorate": "Display a commit history graph with all branches and tags",
    "git log --oneline --graph --all --decorate": "Display a compact commit history graph with all branches and tags",
    "git log --author='<author_name>'": "Show commits by a specific author",
    "git show <commit_hash>": "Show the changes introduced by a specific commit",
    "git diff --name-only <branch1>..<branch2>": "Show the names of files that differ between two branches",
    "git pull --rebase": "Fetch changes from the remote repository and reapply local commits on top",
    "git fetch --prune": "Fetch changes from the remote repository and remove references to deleted branches",
    "git log --since='2 weeks ago' --until='1 week ago'": "Show commits within a specific date range",
    "git log --pretty=format:'%h %s' --graph": "Display a commit history graph with abbreviated commit hashes and commit messages",
    "git log --pretty=format:'%h %s' --graph --date=short": "Display a commit history graph with abbreviated commit hashes, commit messages, and short date format",
    "git diff HEAD^ HEAD": "Show the differences between the last two commits",
    "git log --oneline --graph --all --branches": "Display a commit history graph with all branches highlighted",
    "git rev-list --all --count": "Count the total number of commits in the repository"
   
   }
